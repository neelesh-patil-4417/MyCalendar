from django.shortcuts import redirect
from django.http import HttpResponseBadRequest,HttpResponse
from google_auth_oauthlib.flow import Flow
from googleapiclient.discovery import build
from rest_framework.response import Response
from rest_framework.decorators import api_view
import os

os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'
#Using this command we can allow google Oauth2 authorization server to send the access token in http form, usually authorization server send token only by https methods.

scopes1 = ['https://www.googleapis.com/auth/calendar.events']  
# This make sures what operations are restricted to the api from google console cloud
# like in above scopes we can get the events list and then edit also 
# There are many such as scopes like username, user mail-id, etc 
    
# this a secret key provided by the google cloud server to ensure that during the flow the token is only accessed by the requested real api not any other api.


@api_view(['GET'])
def authinit(request):
    """
    When 'rest/v1/calendar/init/' url is called then this function gets executed and redirect the user to google signin page so that google Oauth server make sures there is proper authentication and the token is provided to access the data of this particular user only.
    Args:
        request ("GET Method") = This is get method where request contains the state of the request 
    Returns:
        _type_: A url to which user can sign in and google authorization server ensures to provide the access token or not to the api
    """
    
    flow = Flow.from_client_secrets_file('/home/nilesh-linux/Desktop/DjangoProjects/oauthpractice/weather/weatherapi/client_secret.json',scopes=scopes1)
    # Flow is class that is use to create a flow of authorization, authentication, redirecting after authorization, etc.
    # Returns:
    #     _type_: flow is object that contains contains all details of flow of particular user that is created by using the "from_clients_secrets_file" method inside the Flow class
    
    flow.redirect_uri = 'http://127.0.0.1:8000/rest/v1/calendar/redirect/'
    #after the authorization the user is redirected to the above url and respectively the view function is executed


    authorization_url,state = flow.authorization_url(access_type = 'offline',include_granted_scopes='true')
    #this is the url generated by the Flow class so that whenever the API requests for the authorization for that particular user then it generates the authorization url and is redirect there to sign in
    #here we get to values i.e authorization url and state, state parameter is used for security and verification process. this state parameter now contains the state and token will be generated with respect to this state only.
    
    request.session['state']=state

    return redirect(authorization_url)
    # return Response msg":"You have been redirect"})


@api_view(['GET'])
def redirecttheauthorizedpage(request):
    state = request.GET.get('state')
    # We maintain security by ensuring the  response we get from authorization server corresponds to same request that was originally sent. 
    flow = Flow.from_client_secrets_file('/home/nilesh-linux/Desktop/DjangoProjects/oauthpractice/weather/weatherapi/client_secret.json',scopes=scopes1,state=state)

    flow.redirect_uri = 'http://127.0.0.1:8000/rest/v1/calendar/redirect/'

    authorization_response = request.build_absolute_uri()
    flow.fetch_token(authorization_response=authorization_response)

    credentials = flow.credentials

    #here we get the credientials i.e the token_id, client_id,etc that we can interact with google APIs
    
    # GET CALENDAR VIEW 


    service = build('calendar','v3',credentials=credentials)
    events_result = service.events().list(calendarId='primary',maxResults=10, singleEvents=True,orderBy='startTime').execute()

    events = events_result.get('items',[])

    if not events:
        return Response({"msg":"No Upcoming events"})
    
    data = []

    for event in events:
        data.append(event)

    return Response({
        "token":credentials.token,
        "client-id":credentials.client_id,
        "data": data
    })